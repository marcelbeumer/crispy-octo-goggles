// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: grpc/chat.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HubClient is the client API for Hub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HubClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (Hub_ChatClient, error)
}

type hubClient struct {
	cc grpc.ClientConnInterface
}

func NewHubClient(cc grpc.ClientConnInterface) HubClient {
	return &hubClient{cc}
}

func (c *hubClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Hub_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hub_ServiceDesc.Streams[0], "/chat.Hub/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &hubChatClient{stream}
	return x, nil
}

type Hub_ChatClient interface {
	Send(*EventEnvelope) error
	Recv() (*EventEnvelope, error)
	grpc.ClientStream
}

type hubChatClient struct {
	grpc.ClientStream
}

func (x *hubChatClient) Send(m *EventEnvelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hubChatClient) Recv() (*EventEnvelope, error) {
	m := new(EventEnvelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HubServer is the server API for Hub service.
// All implementations must embed UnimplementedHubServer
// for forward compatibility
type HubServer interface {
	Chat(Hub_ChatServer) error
	mustEmbedUnimplementedHubServer()
}

// UnimplementedHubServer must be embedded to have forward compatible implementations.
type UnimplementedHubServer struct {
}

func (UnimplementedHubServer) Chat(Hub_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedHubServer) mustEmbedUnimplementedHubServer() {}

// UnsafeHubServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HubServer will
// result in compilation errors.
type UnsafeHubServer interface {
	mustEmbedUnimplementedHubServer()
}

func RegisterHubServer(s grpc.ServiceRegistrar, srv HubServer) {
	s.RegisterService(&Hub_ServiceDesc, srv)
}

func _Hub_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HubServer).Chat(&hubChatServer{stream})
}

type Hub_ChatServer interface {
	Send(*EventEnvelope) error
	Recv() (*EventEnvelope, error)
	grpc.ServerStream
}

type hubChatServer struct {
	grpc.ServerStream
}

func (x *hubChatServer) Send(m *EventEnvelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hubChatServer) Recv() (*EventEnvelope, error) {
	m := new(EventEnvelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Hub_ServiceDesc is the grpc.ServiceDesc for Hub service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hub_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Hub",
	HandlerType: (*HubServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _Hub_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/chat.proto",
}
